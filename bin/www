#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myExpressApp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create Sokcet.io
 */
var io = require('socket.io')(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * socket io connection
 */

var rooms = [];
var count = 0;
io.sockets.on('connection', function(socket){
  //방 접속
  socket.on('joinroom',function(data){
    socket.join(data.room);
    
    var nickName = 'guest' + Math.floor(Math.random()*1000);
    if(rooms[data.room] == undefined){
      rooms[data.room] = {};
    }
    rooms[data.room][socket.id.substring(1)] = nickName;
    
    io.sockets.to(data.room).emit('broadcast_msg',{msg : rooms[data.room][socket.id.substring(1)] + ' 입장'});
    
    io.sockets.to(data.room).emit('printUsers',{list : rooms[data.room]});
  });
  //닉네임 변경
  socket.on('changeNick',function(data){
    let roomName = getRoomName();
    let isExsist;
    for(let id in rooms[roomName]){
      if(rooms[roomName][id] == data.nickName){
        isExsist = true;
      }
    }
    if(isExsist){
      socket.emit('toclient', {msg : '존재하는 닉네임입니다.'});
    }else{
      rooms[roomName][socket.id.substring(1)] = data.nickName;
      io.sockets.to(roomName).emit('printUsers',{list : rooms[roomName]});
    }
  });
  //채팅 전송
  socket.on('fromclient',function(data){
    io.sockets.to(data.room).emit('toclient', {msg: data.msg, nickName : rooms[data.room][socket.id.substring(1)]});
  });
  //접속 아웃
  socket.on('disconnect', function(data){
    let roomName;
    
    for(let i in rooms){
      if(rooms[i][socket.id.substring(1)]!=undefined){
        rooms[i][socket.id.substring(1)] = undefined;
        roomName = i;
        break;
      }
    }
    io.sockets.to(roomName).emit('printUsers',{list : rooms[roomName]});
  });
  //방 이름 찾기
  function getRoomName(){
    let roomName;
    for(let i in rooms){
      if(rooms[i][socket.id.substring(1)]!=undefined){
        roomName = i;
        break;
      }
    }
    return roomName;
  }
});
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
